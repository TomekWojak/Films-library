import{getData,createBrowsePage,createMainHeroSection,showErrorPopup,showBigLoader,hideBigLoader}from"./components.min.js";document.addEventListener("DOMContentLoaded",function(){new Map;(()=>{const e=getData(),o=e?.loggedIn;document.querySelector(".container");e&&o||(window.location.href="/")})()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
