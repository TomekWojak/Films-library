import{createElement}from"./helpers.min.js";export const createLoginPage=({main:{text:{title:e,subtitle:t,description:n,button:r,errorInvalid:a,errorRequired:o},placeholder:{username:i,password:p}}})=>{const s=createElement("main",["main"]),c=createElement("div",["wrapper"]),m=createElement("h1"),l=createElement("span",["main__title"]),d=createElement("span",["main__subtitle"]),_=createElement("p",["main__text"]),u=createElement("form",["main__form"]),f=createElement("input",["main__form-input","main__form-input--username"],{type:"text",placeholder:"Username"}),x=createElement("input",["main__form-input","main__form-input--password"],{type:"password",placeholder:"Password"}),E=createElement("button",["main__form-button"],{type:"submit"}),g=createElement("p",["main__form-error-txt"]);return l.textContent=e,d.textContent=t,_.textContent=n,E.textContent=r,m.append(l,d),u.append(f,x,E,g),c.append(m,_,u),s.append(c),s};export const showLoader=()=>{const e=createElement("div",["loading-area"]);return e.innerHTML='            <svg class="loader-big" viewBox="0 0 120 120" width="120" height="120">\n                <defs>\n                    <linearGradient id="loader-accent" x1="0%" y1="0%" x2="100%" y2="0%">\n                        <stop offset="0%" stop-color="#4da8da" stop-opacity="0.8" />\n                        <stop offset="70%" stop-color="#4da8da" stop-opacity="0.4" />\n                        <stop offset="100%" stop-color="#4da8da" stop-opacity="0" />\n                    </linearGradient>\n                </defs>\n                <circle class="loading-circle-big" r="35" cx="60" cy="60"></circle>\n            </svg>',e};export const hideLoader=()=>{const e=document.querySelector(".loading-area");e?.remove()};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50cy5taW4uanMiLCJuYW1lcyI6WyJjcmVhdGVFbGVtZW50IiwiY3JlYXRlTG9naW5QYWdlIiwibWFpbiIsInRleHQiLCJ0aXRsZSIsInN1YnRpdGxlIiwiZGVzY3JpcHRpb24iLCJidXR0b24iLCJlcnJvckludmFsaWQiLCJlcnJvclJlcXVpcmVkIiwicGxhY2Vob2xkZXIiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwibWFpbkNvbnRlbnQiLCJ3cmFwcGVyIiwibG9naW5UaXRsZSIsImxvZ2luVGl0bGVUb3AiLCJsb2dpblRpdGxlQm90dG9tIiwibG9naW5UZXh0IiwiZm9ybSIsInVzZXJuYW1lSW5wdXQiLCJ0eXBlIiwicGFzc3dvcmRJbnB1dCIsInN1Ym1pdEJ0biIsImVycm9yVHh0IiwidGV4dENvbnRlbnQiLCJhcHBlbmQiLCJzaG93TG9hZGVyIiwibG9hZGluZ0FyZWEiLCJpbm5lckhUTUwiLCJoaWRlTG9hZGVyIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwicmVtb3ZlIl0sInNvdXJjZXMiOlsiY29tcG9uZW50cy5qcyJdLCJtYXBwaW5ncyI6Ik9BQVNBLGtCQUFxQiwwQkFFdkIsTUFBTUMsZ0JBQWtCLEVBQzlCQyxNQUNDQyxNQUFRQyxRQUFPQyxXQUFVQyxjQUFhQyxTQUFRQyxlQUFjQyxpQkFDNURDLGFBQWVDLFdBQVVDLGlCQUcxQixNQUFNQyxFQUFjYixjQUFjLE9BQVEsQ0FBQyxTQUNyQ2MsRUFBVWQsY0FBYyxNQUFPLENBQUMsWUFDaENlLEVBQWFmLGNBQWMsTUFDM0JnQixFQUFnQmhCLGNBQWMsT0FBUSxDQUFDLGdCQUN2Q2lCLEVBQW1CakIsY0FBYyxPQUFRLENBQUMsbUJBQzFDa0IsRUFBWWxCLGNBQWMsSUFBSyxDQUFDLGVBQ2hDbUIsRUFBT25CLGNBQWMsT0FBUSxDQUFDLGVBQzlCb0IsRUFBZ0JwQixjQUNyQixRQUNBLENBQUMsbUJBQW9CLDhCQUNyQixDQUFFcUIsS0FBTSxPQUFRWCxZQUFhLGFBRXhCWSxFQUFnQnRCLGNBQ3JCLFFBQ0EsQ0FBQyxtQkFBb0IsOEJBQ3JCLENBQUVxQixLQUFNLFdBQVlYLFlBQWEsYUFFNUJhLEVBQVl2QixjQUFjLFNBQVUsQ0FBQyxxQkFBc0IsQ0FDaEVxQixLQUFNLFdBRURHLEVBQVd4QixjQUFjLElBQUssQ0FBQyx5QkFhckMsT0FYQWdCLEVBQWNTLFlBQWNyQixFQUM1QmEsRUFBaUJRLFlBQWNwQixFQUMvQmEsRUFBVU8sWUFBY25CLEVBQ3hCaUIsRUFBVUUsWUFBY2xCLEVBRXhCUSxFQUFXVyxPQUFPVixFQUFlQyxHQUNqQ0UsRUFBS08sT0FBT04sRUFBZUUsRUFBZUMsRUFBV0MsR0FFckRWLEVBQVFZLE9BQU9YLEVBQVlHLEVBQVdDLEdBQ3RDTixFQUFZYSxPQUFPWixHQUVaRCxVQUdELE1BQU1jLFdBQWEsS0FDekIsTUFBTUMsRUFBYzVCLGNBQWMsTUFBTyxDQUFDLGlCQVcxQyxPQVZBNEIsRUFBWUMsVUFBWSxxbkJBVWpCRCxVQUVELE1BQU1FLFdBQWEsS0FDekIsTUFBTUYsRUFBY0csU0FBU0MsY0FBYyxpQkFDM0NKLEdBQWFLIiwiaWdub3JlTGlzdCI6W10sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUVsZW1lbnQgfSBmcm9tIFwiLi9oZWxwZXJzLm1pbi5qc1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGNyZWF0ZUxvZ2luUGFnZSA9ICh7XHJcblx0bWFpbjoge1xyXG5cdFx0dGV4dDogeyB0aXRsZSwgc3VidGl0bGUsIGRlc2NyaXB0aW9uLCBidXR0b24sIGVycm9ySW52YWxpZCwgZXJyb3JSZXF1aXJlZCB9LFxyXG5cdFx0cGxhY2Vob2xkZXI6IHsgdXNlcm5hbWUsIHBhc3N3b3JkIH0sXHJcblx0fSxcclxufSkgPT4ge1xyXG5cdGNvbnN0IG1haW5Db250ZW50ID0gY3JlYXRlRWxlbWVudChcIm1haW5cIiwgW1wibWFpblwiXSk7XHJcblx0Y29uc3Qgd3JhcHBlciA9IGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgW1wid3JhcHBlclwiXSk7XHJcblx0Y29uc3QgbG9naW5UaXRsZSA9IGNyZWF0ZUVsZW1lbnQoXCJoMVwiKTtcclxuXHRjb25zdCBsb2dpblRpdGxlVG9wID0gY3JlYXRlRWxlbWVudChcInNwYW5cIiwgW1wibWFpbl9fdGl0bGVcIl0pO1xyXG5cdGNvbnN0IGxvZ2luVGl0bGVCb3R0b20gPSBjcmVhdGVFbGVtZW50KFwic3BhblwiLCBbXCJtYWluX19zdWJ0aXRsZVwiXSk7XHJcblx0Y29uc3QgbG9naW5UZXh0ID0gY3JlYXRlRWxlbWVudChcInBcIiwgW1wibWFpbl9fdGV4dFwiXSk7XHJcblx0Y29uc3QgZm9ybSA9IGNyZWF0ZUVsZW1lbnQoXCJmb3JtXCIsIFtcIm1haW5fX2Zvcm1cIl0pO1xyXG5cdGNvbnN0IHVzZXJuYW1lSW5wdXQgPSBjcmVhdGVFbGVtZW50KFxyXG5cdFx0XCJpbnB1dFwiLFxyXG5cdFx0W1wibWFpbl9fZm9ybS1pbnB1dFwiLCBcIm1haW5fX2Zvcm0taW5wdXQtLXVzZXJuYW1lXCJdLFxyXG5cdFx0eyB0eXBlOiBcInRleHRcIiwgcGxhY2Vob2xkZXI6IFwiVXNlcm5hbWVcIiB9XHJcblx0KTtcclxuXHRjb25zdCBwYXNzd29yZElucHV0ID0gY3JlYXRlRWxlbWVudChcclxuXHRcdFwiaW5wdXRcIixcclxuXHRcdFtcIm1haW5fX2Zvcm0taW5wdXRcIiwgXCJtYWluX19mb3JtLWlucHV0LS1wYXNzd29yZFwiXSxcclxuXHRcdHsgdHlwZTogXCJwYXNzd29yZFwiLCBwbGFjZWhvbGRlcjogXCJQYXNzd29yZFwiIH1cclxuXHQpO1xyXG5cdGNvbnN0IHN1Ym1pdEJ0biA9IGNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwgW1wibWFpbl9fZm9ybS1idXR0b25cIl0sIHtcclxuXHRcdHR5cGU6IFwic3VibWl0XCIsXHJcblx0fSk7XHJcblx0Y29uc3QgZXJyb3JUeHQgPSBjcmVhdGVFbGVtZW50KFwicFwiLCBbXCJtYWluX19mb3JtLWVycm9yLXR4dFwiXSk7XHJcblxyXG5cdGxvZ2luVGl0bGVUb3AudGV4dENvbnRlbnQgPSB0aXRsZTtcclxuXHRsb2dpblRpdGxlQm90dG9tLnRleHRDb250ZW50ID0gc3VidGl0bGU7XHJcblx0bG9naW5UZXh0LnRleHRDb250ZW50ID0gZGVzY3JpcHRpb247XHJcblx0c3VibWl0QnRuLnRleHRDb250ZW50ID0gYnV0dG9uO1xyXG5cclxuXHRsb2dpblRpdGxlLmFwcGVuZChsb2dpblRpdGxlVG9wLCBsb2dpblRpdGxlQm90dG9tKTtcclxuXHRmb3JtLmFwcGVuZCh1c2VybmFtZUlucHV0LCBwYXNzd29yZElucHV0LCBzdWJtaXRCdG4sIGVycm9yVHh0KTtcclxuXHJcblx0d3JhcHBlci5hcHBlbmQobG9naW5UaXRsZSwgbG9naW5UZXh0LCBmb3JtKTtcclxuXHRtYWluQ29udGVudC5hcHBlbmQod3JhcHBlcik7XHJcblxyXG5cdHJldHVybiBtYWluQ29udGVudDtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBzaG93TG9hZGVyID0gKCkgPT4ge1xyXG5cdGNvbnN0IGxvYWRpbmdBcmVhID0gY3JlYXRlRWxlbWVudChcImRpdlwiLCBbXCJsb2FkaW5nLWFyZWFcIl0pO1xyXG5cdGxvYWRpbmdBcmVhLmlubmVySFRNTCA9IGAgICAgICAgICAgICA8c3ZnIGNsYXNzPVwibG9hZGVyLWJpZ1wiIHZpZXdCb3g9XCIwIDAgMTIwIDEyMFwiIHdpZHRoPVwiMTIwXCIgaGVpZ2h0PVwiMTIwXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGVmcz5cclxuICAgICAgICAgICAgICAgICAgICA8bGluZWFyR3JhZGllbnQgaWQ9XCJsb2FkZXItYWNjZW50XCIgeDE9XCIwJVwiIHkxPVwiMCVcIiB4Mj1cIjEwMCVcIiB5Mj1cIjAlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzdG9wIG9mZnNldD1cIjAlXCIgc3RvcC1jb2xvcj1cIiM0ZGE4ZGFcIiBzdG9wLW9wYWNpdHk9XCIwLjhcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3RvcCBvZmZzZXQ9XCI3MCVcIiBzdG9wLWNvbG9yPVwiIzRkYThkYVwiIHN0b3Atb3BhY2l0eT1cIjAuNFwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzdG9wIG9mZnNldD1cIjEwMCVcIiBzdG9wLWNvbG9yPVwiIzRkYThkYVwiIHN0b3Atb3BhY2l0eT1cIjBcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvbGluZWFyR3JhZGllbnQ+XHJcbiAgICAgICAgICAgICAgICA8L2RlZnM+XHJcbiAgICAgICAgICAgICAgICA8Y2lyY2xlIGNsYXNzPVwibG9hZGluZy1jaXJjbGUtYmlnXCIgcj1cIjM1XCIgY3g9XCI2MFwiIGN5PVwiNjBcIj48L2NpcmNsZT5cclxuICAgICAgICAgICAgPC9zdmc+YDtcclxuXHRyZXR1cm4gbG9hZGluZ0FyZWE7XHJcbn07XHJcbmV4cG9ydCBjb25zdCBoaWRlTG9hZGVyID0gKCkgPT4ge1xyXG5cdGNvbnN0IGxvYWRpbmdBcmVhID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5sb2FkaW5nLWFyZWFcIik7XHJcblx0bG9hZGluZ0FyZWE/LnJlbW92ZSgpO1xyXG59O1xyXG4iXX0=
